/*
  ==============================================================================

    LookFeel.cpp
    Created: 5 Oct 2019 10:39:23am
    Author:  ancie

  ==============================================================================
*/

#include "LookFeel.h"

void OtherLookAndFeel::drawLinearSlider(Graphics& g, int x, int y, int width, int height, float sliderPos,
        float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider& slider)
    {
        if (slider.isBar())
        {
            g.setColour(slider.findColour(Slider::trackColourId));
            g.fillRect(slider.isHorizontal() ? Rectangle<float>(static_cast<float> (x), y + 0.5f, sliderPos - x, height - 1.0f)
                : Rectangle<float>(x + 0.5f, sliderPos, width - 1.0f, y + (height - sliderPos)));
        }
        else
        {
            auto isTwoVal = (style == Slider::SliderStyle::TwoValueVertical || style == Slider::SliderStyle::TwoValueHorizontal);
            auto isThreeVal = (style == Slider::SliderStyle::ThreeValueVertical || style == Slider::SliderStyle::ThreeValueHorizontal);

            auto trackWidth = jmin(6.0f, slider.isHorizontal() ? height * 0.25f : width * 0.25f);

            Point<float> startPoint(slider.isHorizontal() ? x : x + width * 0.5f,
                slider.isHorizontal() ? y + height * 0.5f : height + y);

            Point<float> endPoint(slider.isHorizontal() ? width + x : startPoint.x,
                slider.isHorizontal() ? startPoint.y : y);

            Path backgroundTrack;
            backgroundTrack.startNewSubPath(startPoint);
            backgroundTrack.lineTo(endPoint);
            //g.drawImage(cachedImage_slid_png_1, Rectangle<float>(startPoint.getX() - 130, startPoint.getY()-12, endPoint.getX() - startPoint.getX() + 500, 25));
            g.setColour(slider.findColour(Slider::backgroundColourId));
            g.strokePath(backgroundTrack, { trackWidth, PathStrokeType::curved, PathStrokeType::rounded });

            Path valueTrack;
            Point<float> minPoint, maxPoint, thumbPoint;

            if (isTwoVal || isThreeVal)
            {
                minPoint = { slider.isHorizontal() ? minSliderPos : width * 0.5f,
                             slider.isHorizontal() ? height * 0.5f : minSliderPos };

                if (isThreeVal)
                    thumbPoint = { slider.isHorizontal() ? sliderPos : width * 0.5f,
                                   slider.isHorizontal() ? height * 0.5f : sliderPos };

                maxPoint = { slider.isHorizontal() ? maxSliderPos : width * 0.5f,
                             slider.isHorizontal() ? height * 0.5f : maxSliderPos };
            }
            else
            {
                auto kx = slider.isHorizontal() ? sliderPos : (x + width * 0.5f);
                auto ky = slider.isHorizontal() ? (y + height * 0.5f) : sliderPos;

                minPoint = startPoint;
                maxPoint = { kx, ky };
            }

            auto thumbWidth = getSliderThumbRadius(slider);
            valueTrack.startNewSubPath(minPoint);
            valueTrack.lineTo(isThreeVal ? thumbPoint : maxPoint);
            g.setColour(slider.findColour(Slider::trackColourId));
            //g.drawImage(cachedImage_slid_png_1, Rectangle<float>(minPoint, maxPoint));
            g.strokePath(valueTrack, { trackWidth, PathStrokeType::curved, PathStrokeType::rounded });

            if (!isTwoVal)
            {
                g.drawImage(cachedImage_knob_png_1, Rectangle<float>(static_cast<float> (thumbWidth + 10), static_cast<float> (thumbWidth)).withCentre(isThreeVal ? thumbPoint : maxPoint));
                //g.setColour(slider.findColour(Slider::thumbColourId));
                //g.fillRect(Rectangle<float>(static_cast<float> (thumbWidth), static_cast<float> (thumbWidth)).withCentre(isThreeVal ? thumbPoint : maxPoint));
            }

            if (isTwoVal || isThreeVal)
            {
                auto sr = jmin(trackWidth, (slider.isHorizontal() ? height : width) * 0.4f);
                auto pointerColour = slider.findColour(Slider::thumbColourId);

                if (slider.isHorizontal())
                {
                    drawPointer(g, minSliderPos - sr,
                        jmax(0.0f, y + height * 0.5f - trackWidth * 2.0f),
                        trackWidth * 2.0f, pointerColour, 2);

                    drawPointer(g, maxSliderPos - trackWidth,
                        jmin(y + height - trackWidth * 2.0f, y + height * 0.5f),
                        trackWidth * 2.0f, pointerColour, 4);
                }
                else
                {
                    drawPointer(g, jmax(0.0f, x + width * 0.5f - trackWidth * 2.0f),
                        minSliderPos - trackWidth,
                        trackWidth * 2.0f, pointerColour, 1);

                    drawPointer(g, jmin(x + width - trackWidth * 2.0f, x + width * 0.5f), maxSliderPos - sr,
                        trackWidth * 2.0f, pointerColour, 3);
                }
            }
        }
    }

//==============================================================================
// Binary resources - be careful not to edit any of these sections!

// JUCER_RESOURCE: knob_png, 452, "knob.png"
static const unsigned char resource_knob_png[] = { 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,21,0,0,0,46,8,2,0,0,0,72,200,197,175,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,
65,0,0,177,143,11,252,97,5,0,0,0,9,112,72,89,115,0,0,14,195,0,0,14,195,1,199,111,168,100,0,0,1,89,73,68,65,84,72,75,197,150,161,110,133,64,16,69,87,226,43,9,162,10,241,84,19,36,169,194,96,112,40,4,6,129,
195,85,214,87,53,149,149,253,4,62,173,127,208,115,31,155,38,180,207,236,221,38,61,9,111,8,121,119,152,157,157,157,33,188,221,226,253,76,124,250,139,109,219,194,107,6,203,178,132,151,12,166,105,10,207,
25,252,133,158,48,226,106,18,65,56,207,115,192,7,198,99,24,134,144,67,219,182,161,105,26,140,71,223,247,114,115,103,81,20,69,215,117,255,167,7,233,171,170,186,88,212,117,173,245,115,177,13,30,227,56,6,
150,65,8,247,233,148,101,137,139,128,33,18,3,92,72,15,184,48,32,127,210,83,134,28,227,84,214,117,229,23,173,106,240,209,2,161,242,103,215,47,194,168,143,14,19,193,133,244,244,192,28,194,103,6,251,190,
135,143,12,104,97,126,253,34,84,255,35,7,24,15,237,191,87,63,128,80,122,42,249,193,130,35,172,253,59,58,185,7,81,4,42,57,110,101,58,138,31,243,228,34,61,215,145,143,84,16,178,5,138,223,70,249,187,14,98,
19,197,31,111,45,164,143,159,34,22,100,65,249,51,56,242,167,245,199,163,100,161,247,199,91,11,233,115,230,15,168,255,219,208,59,101,24,97,6,8,105,161,210,31,195,216,64,239,199,28,243,48,21,166,174,222,
207,221,49,207,127,16,187,196,149,248,232,12,141,71,250,152,199,51,124,88,240,143,111,241,205,61,226,225,186,174,95,1,98,216,79,19,98,153,122,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* OtherLookAndFeel::knob_png = (const char*)resource_knob_png;
const int OtherLookAndFeel::knob_pngSize = 452;

static const unsigned char resource_slid_png[] = { 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,200,0,0,0,20,8,6,0,0,0,200,164,114,202,0,0,0,6,98,75,71,68,0,41,0,41,0,41,64,188,19,
9,0,0,0,9,112,72,89,115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,0,7,116,73,77,69,7,227,10,5,10,12,19,4,246,160,27,0,0,0,29,105,84,88,116,67,111,109,109,101,110,116,0,0,0,0,0,67,114,101,97,116,101,100,32,
119,105,116,104,32,71,73,77,80,100,46,101,7,0,0,5,10,73,68,65,84,104,222,237,90,91,86,27,49,12,213,117,186,138,118,25,252,117,251,156,126,178,12,150,1,183,31,227,135,108,73,182,147,210,132,210,241,225,
64,200,120,36,89,214,235,202,22,57,199,57,206,113,142,115,156,227,28,231,56,199,7,15,60,130,233,243,243,243,47,17,249,233,73,131,44,18,208,255,237,62,231,121,199,191,24,222,45,223,123,239,162,252,28,111,
1,245,111,196,203,231,41,138,143,63,175,210,86,244,80,152,143,188,4,130,212,111,71,155,207,50,67,9,94,100,89,203,219,150,23,204,87,58,105,139,59,214,230,174,207,229,213,214,58,210,245,246,163,147,145,
150,127,163,145,223,79,158,220,199,252,203,229,242,87,109,56,125,118,183,37,157,199,132,121,86,141,193,37,87,190,165,54,193,252,141,101,170,105,112,248,64,138,72,229,143,80,182,142,178,35,20,53,51,244,
146,245,179,50,47,176,126,133,171,195,29,70,145,44,39,87,70,24,121,225,124,103,9,99,46,18,45,95,34,16,27,145,188,247,137,237,159,211,65,180,225,187,27,71,179,89,179,29,105,243,37,220,210,104,187,49,200,
209,101,129,153,145,210,58,57,61,119,172,22,162,158,2,177,28,153,222,202,240,174,14,70,116,180,227,209,3,93,153,140,126,61,159,116,162,29,166,190,173,149,217,203,132,155,22,251,143,59,8,22,38,108,163,
8,29,221,51,124,151,65,126,225,86,5,138,102,228,228,178,64,213,37,73,111,221,1,7,93,146,209,58,43,85,198,67,149,153,91,193,131,147,44,161,57,140,66,161,89,99,51,85,198,233,135,40,252,41,200,19,129,49,
218,177,179,123,110,4,202,131,20,254,60,24,220,48,190,61,196,17,208,52,212,43,156,21,43,0,16,86,37,227,80,124,221,168,148,117,77,145,52,68,117,230,226,121,81,255,214,223,105,40,207,186,121,20,28,224,64,
61,67,103,48,134,238,80,199,155,122,60,73,79,15,173,44,243,106,126,67,79,99,11,7,211,24,26,80,107,213,88,65,97,26,139,251,90,125,51,98,174,138,103,134,244,14,9,48,147,193,37,107,140,105,113,140,143,39,
239,81,101,61,196,65,94,95,95,179,209,199,65,120,6,0,117,64,98,133,230,122,46,12,97,96,0,245,204,243,13,232,150,206,168,224,236,130,231,4,97,67,65,172,163,50,200,28,135,79,30,115,9,136,144,129,33,181,
117,27,93,81,148,225,15,145,215,213,101,145,141,26,22,91,195,196,144,225,21,192,238,215,231,96,144,73,163,197,211,235,152,125,27,31,213,44,137,234,239,175,224,32,47,47,47,202,64,246,26,106,112,140,222,
177,220,190,72,163,87,207,36,65,46,88,184,83,30,173,10,120,236,183,3,87,116,139,121,30,246,48,13,31,83,140,54,118,5,43,102,129,87,195,164,90,192,113,162,215,143,90,99,180,87,33,95,114,111,239,191,146,
131,92,46,151,109,163,7,54,183,6,125,183,42,132,125,157,67,206,230,97,219,71,100,218,65,179,206,180,52,134,141,142,20,230,226,55,122,11,253,53,58,184,66,191,19,209,74,6,236,114,92,128,53,87,107,40,120,
235,113,254,241,24,7,233,32,40,41,56,128,128,141,248,90,139,163,237,211,78,33,216,210,113,72,235,35,90,63,106,243,10,124,102,4,130,115,124,6,117,3,40,108,33,176,44,144,17,79,138,0,109,121,239,254,178,
192,67,50,46,218,16,204,6,237,235,171,87,19,133,243,192,193,234,151,170,97,224,120,0,180,236,19,197,21,76,195,187,97,242,207,225,32,63,190,127,15,3,189,193,25,181,81,98,15,222,86,81,220,221,204,35,188,
13,120,35,192,25,74,190,8,139,80,179,167,205,138,25,234,135,88,197,43,59,32,22,131,140,60,69,68,210,44,59,160,143,212,152,102,84,44,178,166,110,56,204,179,77,132,207,162,61,158,57,92,107,100,236,151,120,
95,194,65,158,158,158,182,21,23,2,183,218,77,66,6,224,185,235,5,28,40,3,236,78,155,81,12,46,37,131,107,198,211,217,176,235,117,197,41,113,117,176,212,27,167,157,39,29,170,70,216,157,178,77,139,234,80,
171,19,117,29,20,242,9,125,209,87,74,25,145,145,146,180,110,0,255,52,222,209,209,110,7,234,234,211,120,60,170,176,122,176,131,188,189,189,109,71,179,107,90,125,197,81,222,203,105,1,134,14,14,68,240,254,
62,108,200,236,106,138,132,93,36,89,92,245,168,207,222,230,198,21,117,117,140,3,169,107,49,168,235,139,219,194,253,85,150,22,137,49,56,173,127,253,68,250,107,39,169,201,239,235,97,34,199,108,205,178,167,
155,40,227,220,195,129,62,213,65,33,23,73,148,182,208,14,219,170,94,179,169,195,0,212,7,100,215,85,184,229,138,9,167,82,82,161,134,118,144,54,237,210,77,123,91,21,8,168,86,53,54,248,183,107,25,40,237,
44,218,78,159,119,10,94,171,155,14,2,70,231,251,226,118,244,184,68,245,179,150,45,61,212,186,208,215,23,118,16,108,62,199,236,130,2,99,61,51,100,134,29,239,53,157,48,31,116,107,227,165,114,15,95,182,10,
104,35,144,76,167,97,225,138,205,222,25,55,87,7,96,165,182,161,23,135,88,213,92,56,133,179,70,50,14,81,212,103,86,230,242,194,127,120,213,132,222,103,120,202,240,118,130,55,59,35,103,84,120,45,109,118,
81,56,190,18,34,125,102,48,209,121,101,221,112,187,125,152,220,83,163,115,11,116,218,188,162,115,23,202,113,27,122,254,203,176,134,86,212,168,110,64,56,247,180,168,222,27,162,12,239,231,35,231,56,199,
57,206,113,142,115,220,48,126,3,29,35,126,57,247,25,30,234,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* OtherLookAndFeel::slid_png = (const char*)resource_slid_png;
const int OtherLookAndFeel::slid_pngSize = 16513;